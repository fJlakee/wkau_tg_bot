const TelegramBot = require('node-telegram-bot-api');
const schedule = require('node-schedule');
const fs = require('fs');
const path = require('path');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
const DATA_DIR = process.env.DATA_DIR || '.';
const SCHEDULES_FILE = path.join(DATA_DIR, 'schedules.json');
const GROUP_INDEXES_FILE = path.join(DATA_DIR, 'group_indexes.json');
const USER_DATA_FILE = path.join(DATA_DIR, 'user_data.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
const groupIndexes = JSON.parse(fs.readFileSync(GROUP_INDEXES_FILE, 'utf8'));
const schedules = JSON.parse(fs.readFileSync(SCHEDULES_FILE, 'utf8'));

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let userData = {};
try {
    userData = JSON.parse(fs.readFileSync(USER_DATA_FILE, 'utf8'));
} catch (error) {
    console.log('No existing user data found, creating new file');
    fs.writeFileSync(USER_DATA_FILE, JSON.stringify({}, null, 2));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function saveUserData() {
    fs.writeFileSync(USER_DATA_FILE, JSON.stringify(userData, null, 2));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserData(userId) {
    return userData[userId] || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function setUserData(userId, data) {
    userData[userId] = data;
    saveUserData();
}

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
const token = '8159232021:AAEFQCjcEEE5ZkjGowMGMIJ3iuNay28WMHo';
const bot = new TelegramBot(token, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è', 'üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞'],
            ['üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é', '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É']
        ],
        resize_keyboard: true
    }
};

const mainInlineKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'today' }],
            [{ text: 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', callback_data: 'tomorrow' }],
            [{ text: 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'week' }],
            [{ text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data: 'change_group' }]
        ]
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
function getScheduleForDay(group, day) {
    if (!schedules[group] || !schedules[group][day]) {
        return null;
    }
    return schedules[group][day];
}

function formatSchedule(lessons) {
    if (!lessons || lessons.length === 0) {
        return '–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç';
    }
    
    return lessons.map(lesson => {
        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        const maxTeacherLength = Math.max(...lesson.teachers.map(teacher => teacher.length));
        
        const teacherClassroomPairs = lesson.teachers.map((teacher, index) => {
            const classroom = lesson.classrooms[index] || '–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            const padding = ' '.repeat(maxTeacherLength - teacher.length);
            return `üü¢${teacher}${padding}   ${classroom}`;
        }).join('\n');
        
        return `‚è∞${lesson.time}\nüìï${lesson.subject} (${lesson.type})\n${teacherClassroomPairs}\n`;
    }).join('\n');
}

function getNextDaySchedule(group) {
    if (!schedules[group]) {
        return null;
    }
    const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'];
    const today = new Date().getDay();
    const nextDayIndex = today === 0 ? 0 : today;
    const nextDay = days[nextDayIndex];
    return getScheduleForDay(group, nextDay);
}

function getWeekSchedule(group) {
    if (!schedules[group]) {
        return null;
    }
    const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'];
    return days.map(day => {
        const schedule = getScheduleForDay(group, day);
        return `üìÖ ${day}:\n${formatSchedule(schedule)}\n`;
    }).join('\n');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
function createKeyboardWithBack(buttons, backData) {
    const keyboard = buttons.map(button => [button]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: backData }]);
    return keyboard;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const savedData = getUserData(userId);
    if (savedData) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates.set(chatId, {
            step: 'main',
            group: savedData.group,
            groupId: savedData.groupId
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
        bot.sendMessage(chatId, 
            `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: ${savedData.group}\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.`,
            {
                reply_markup: mainKeyboard.reply_markup
            }
        );
        return;
    }
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
    userStates.set(chatId, { step: 'institute' });
    
    const institutes = Object.entries(groupIndexes).map(([id, data]) => ({
        text: data.institute_name,
        callback_data: `institute_${id}`
    }));

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:', {
        reply_markup: {
            inline_keyboard: institutes.map(inst => [inst])
        }
    });
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const state = userStates.get(chatId);
    const userId = query.from.id;

    try {
        if (data.startsWith('institute_')) {
            const instituteId = data.split('_')[1];
            if (!groupIndexes[instituteId]) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–û—à–∏–±–∫–∞: –∏–Ω—Å—Ç–∏—Ç—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    show_alert: true
                });
                return;
            }

            const schools = Object.entries(groupIndexes[instituteId].school).map(([id, data]) => ({
                text: data.school_name,
                callback_data: `school_${instituteId}_${id}`
            }));

            userStates.set(chatId, { step: 'school', instituteId });
            
            await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É:', {
                chat_id: chatId,
                message_id: query.message.message_id,
                reply_markup: {
                    inline_keyboard: createKeyboardWithBack(schools, 'back_to_institute')
                }
            });
        } else if (data.startsWith('school_')) {
            const [, instituteId, schoolId] = data.split('_');
            
            if (!groupIndexes[instituteId] || !groupIndexes[instituteId].school[schoolId]) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–û—à–∏–±–∫–∞: —à–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    show_alert: true
                });
                return;
            }

            const groups = Object.entries(groupIndexes[instituteId].school[schoolId].groups).map(([id, name]) => ({
                text: name,
                callback_data: `group_${id}`
            }));

            userStates.set(chatId, { step: 'group', instituteId, schoolId });
            
            await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', {
                chat_id: chatId,
                message_id: query.message.message_id,
                reply_markup: {
                    inline_keyboard: createKeyboardWithBack(groups, `back_to_school_${instituteId}`)
                }
            });
        } else if (data.startsWith('group_')) {
            const groupId = data.split('_')[1];
            const state = userStates.get(chatId);

            if (!state || !state.instituteId || !state.schoolId) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
                    show_alert: true
                });
                return;
            }

            const institute = groupIndexes[state.instituteId];
            if (!institute || !institute.school[state.schoolId] || !institute.school[state.schoolId].groups[groupId]) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    show_alert: true
                });
                return;
            }

            const groupName = institute.school[state.schoolId].groups[groupId];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
            if (!schedules[groupName]) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                    show_alert: true
                });
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setUserData(userId, {
                group: groupName,
                groupId: groupId
            });

            userStates.set(chatId, { 
                step: 'main',
                group: groupName,
                groupId
            });

            await bot.editMessageText(
                `–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: ${groupName}\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.`,
                {
                    chat_id: chatId,
                    message_id: query.message.message_id,
                    reply_markup: mainKeyboard.reply_markup
                }
            );
        } else if (data === 'today') {
            const state = userStates.get(chatId);
            if (!state || !state.group) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞',
                    show_alert: true
                });
                return;
            }

            const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'];
            const today = new Date().getDay();
            const currentDay = days[today === 0 ? 0 : today];
            
            const schedule = getScheduleForDay(state.group, currentDay);
            if (schedule === null) {
                await bot.editMessageText(
                    `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${currentDay}):\n–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç`,
                    {
                        chat_id: chatId,
                        message_id: query.message.message_id,
                        reply_markup: mainInlineKeyboard.reply_markup
                    }
                );
                return;
            }

            await bot.editMessageText(
                `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${currentDay}):\n${formatSchedule(schedule)}`,
                {
                    chat_id: chatId,
                    message_id: query.message.message_id,
                    reply_markup: mainInlineKeyboard.reply_markup
                }
            );
        } else if (data === 'tomorrow') {
            const state = userStates.get(chatId);
            if (!state || !state.group) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞',
                    show_alert: true
                });
                return;
            }

            const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'];
            const today = new Date().getDay();
            const nextDayIndex = today === 0 ? 0 : today;
            const nextDay = days[nextDayIndex];
            
            const schedule = getScheduleForDay(state.group, nextDay);
            if (schedule === null) {
                await bot.editMessageText(
                    `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${nextDay}):\n–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç`,
                    {
                        chat_id: chatId,
                        message_id: query.message.message_id,
                        reply_markup: mainInlineKeyboard.reply_markup
                    }
                );
                return;
            }

            await bot.editMessageText(
                `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${nextDay}):\n${formatSchedule(schedule)}`,
                {
                    chat_id: chatId,
                    message_id: query.message.message_id,
                    reply_markup: mainInlineKeyboard.reply_markup
                }
            );
        } else if (data === 'week') {
            const state = userStates.get(chatId);
            if (!state || !state.group) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞',
                    show_alert: true
                });
                return;
            }

            const weekSchedule = getWeekSchedule(state.group);
            if (weekSchedule === null) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                    show_alert: true
                });
                return;
            }

            await bot.editMessageText(
                `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n${weekSchedule}`,
                {
                    chat_id: chatId,
                    message_id: query.message.message_id,
                    reply_markup: mainInlineKeyboard.reply_markup
                }
            );
        } else if (data === 'change_group') {
            userStates.set(chatId, { step: 'institute' });
            
            const institutes = Object.entries(groupIndexes).map(([id, data]) => ({
                text: data.institute_name,
                callback_data: `institute_${id}`
            }));

            await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:', {
                chat_id: chatId,
                message_id: query.message.message_id,
                reply_markup: {
                    inline_keyboard: institutes.map(inst => [inst])
                }
            });
        } else if (data === 'back_to_institute') {
            userStates.set(chatId, { step: 'institute' });
            
            const institutes = Object.entries(groupIndexes).map(([id, data]) => ({
                text: data.institute_name,
                callback_data: `institute_${id}`
            }));

            await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:', {
                chat_id: chatId,
                message_id: query.message.message_id,
                reply_markup: {
                    inline_keyboard: institutes.map(inst => [inst])
                }
            });
        } else if (data.startsWith('back_to_school_')) {
            const instituteId = data.split('_')[3];
            
            if (!groupIndexes[instituteId]) {
                await bot.answerCallbackQuery(query.id, {
                    text: '–û—à–∏–±–∫–∞: –∏–Ω—Å—Ç–∏—Ç—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    show_alert: true
                });
                return;
            }

            const schools = Object.entries(groupIndexes[instituteId].school).map(([id, data]) => ({
                text: data.school_name,
                callback_data: `school_${instituteId}_${id}`
            }));

            userStates.set(chatId, { step: 'school', instituteId });
            
            await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É:', {
                chat_id: chatId,
                message_id: query.message.message_id,
                reply_markup: {
                    inline_keyboard: createKeyboardWithBack(schools, 'back_to_institute')
                }
            });
        }
    } catch (error) {
        console.error('Error in callback query:', error);
        await bot.answerCallbackQuery(query.id, {
            text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            show_alert: true
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const savedData = getUserData(userId);
    
    if (!savedData || !savedData.group) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /start');
        return;
    }

    try {
        const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'];
        const today = new Date().getDay();
        const currentDay = days[today === 0 ? 0 : today];
        
        const schedule = getScheduleForDay(savedData.group, currentDay);
        if (schedule === null) {
            bot.sendMessage(chatId, `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${currentDay}):\n–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç`);
            return;
        }
        bot.sendMessage(chatId, `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${currentDay}):\n${formatSchedule(schedule)}`);
    } catch (error) {
        console.error('Error in today schedule:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.onText(/üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const savedData = getUserData(userId);
    
    if (!savedData || !savedData.group) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /start');
        return;
    }

    try {
        const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'];
        const today = new Date().getDay();
        const nextDayIndex = today === 0 ? 0 : today;
        const nextDay = days[nextDayIndex];
        
        const schedule = getScheduleForDay(savedData.group, nextDay);
        if (schedule === null) {
            bot.sendMessage(chatId, `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${nextDay}):\n–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç`);
            return;
        }
        bot.sendMessage(chatId, `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${nextDay}):\n${formatSchedule(schedule)}`);
    } catch (error) {
        console.error('Error in tomorrow schedule:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.onText(/üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const savedData = getUserData(userId);
    
    if (!savedData || !savedData.group) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /start');
        return;
    }

    try {
        const weekSchedule = getWeekSchedule(savedData.group);
        if (weekSchedule === null) {
            bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            return;
        }
        bot.sendMessage(chatId, `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n${weekSchedule}`);
    } catch (error) {
        console.error('Error in week schedule:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
schedule.scheduleJob('0 20 * * *', () => {
    userStates.forEach((state, chatId) => {
        if (state.step === 'main' && state.group) {
            const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'];
            const today = new Date().getDay();
            const nextDayIndex = today === 0 ? 0 : today;
            const nextDay = days[nextDayIndex];
            
            const schedule = getScheduleForDay(state.group, nextDay);
            if (schedule === null) {
                bot.sendMessage(chatId, `üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${nextDay}):\n–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç`);
            } else {
                bot.sendMessage(chatId, `üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${nextDay}):\n${formatSchedule(schedule)}`);
            }
        }
    });
});

console.log('Bot is running...');
process.on('SIGTERM', () => {
    console.log('SIGTERM received. Shutting down gracefully...');
    process.exit(0);
}); 